stages:
  - build
  - test
  - deploy

cache:
  # share the cache between jobs
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - docker_images/

# we are on a shared runner so we
# do not use the Docker socket trick
# but Docker in Docker
services:
  - docker:dind

variables:
   # When using dind service we need to instruct docker, to talk with the
   # daemon started inside of the service. The daemon is available with
   # a network connection instead of the default /var/run/docker.sock socket.
   #
   # The 'docker' hostname is the alias of the service container as described at
   # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
   #
   # Note that if you're using Kubernetes executor, the variable should be set to
   # tcp://localhost:2375 because of how Kubernetes executor connects services
   # to the job container
   DOCKER_HOST: tcp://docker:2375/
   # When using dind, it's wise to use the overlayfs driver for
   # improved performance.
   DOCKER_DRIVER: overlay2


buildDocker:
  stage: build
  image: docker:stable
  script:
    - docker build -t app:${CI_PIPELINE_ID} ./webapp
    # gitlab registgy rw access (personal token)
    # is to dangerous for me: using cache
    # see: https://gitlab.com/gitlab-org/gitlab-ce/issues/47828
    - docker save app:${CI_PIPELINE_ID} -o docker_images/app-${CI_PIPELINE_ID}

testInDocker:
  stage: test
  image: docker:stable
  script:
    - docker image load -i docker_images/app-${CI_PIPELINE_ID}
    - docker run --rm app:${CI_PIPELINE_ID} sh -c 'python tests.py'

deployToHK:
  stage: deploy
  image: registry.gitlab.com/laurent.steff/cicdlab/hk:1
  variables:
    HEROKU_API_KEY: ${HK_API_KEY}
  script:
    - heroku container:login
    - docker image load -i docker_images/app-${CI_PIPELINE_ID}
    - docker tag app:${CI_PIPELINE_ID} registry.heroku.com/ls-first/web
    - docker push registry.heroku.com/ls-first/web
    - heroku container:release -a ls-first web
